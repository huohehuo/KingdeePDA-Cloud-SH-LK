package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.cloud.Dao.ReBoxBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RE_BOX_BEAN".
*/
public class ReBoxBeanDao extends AbstractDao<ReBoxBean, Long> {

    public static final String TABLENAME = "RE_BOX_BEAN";

    /**
     * Properties of entity ReBoxBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FIndex = new Property(0, Long.class, "FIndex", true, "_id");
        public final static Property Activity = new Property(1, int.class, "activity", false, "ACTIVITY");
        public final static Property FOrderId = new Property(2, long.class, "FOrderId", false, "FORDER_ID");
        public final static Property FID = new Property(3, String.class, "FID", false, "FID");
        public final static Property FBillNo = new Property(4, String.class, "FBillNo", false, "FBILL_NO");
        public final static Property FAccountID = new Property(5, String.class, "FAccountID", false, "FACCOUNT_ID");
        public final static Property FPCS = new Property(6, String.class, "FPCS", false, "FPCS");
        public final static Property FM3 = new Property(7, String.class, "FM3", false, "FM3");
        public final static Property FWide = new Property(8, String.class, "FWide", false, "FWIDE");
        public final static Property FBoxCode = new Property(9, String.class, "FBoxCode", false, "FBOX_CODE");
        public final static Property FBatch = new Property(10, String.class, "FBatch", false, "FBATCH");
        public final static Property FUnit = new Property(11, String.class, "FUnit", false, "FUNIT");
        public final static Property FStorage = new Property(12, String.class, "FStorage", false, "FSTORAGE");
        public final static Property FCarNo = new Property(13, String.class, "FCarNo", false, "FCAR_NO");
        public final static Property FBaoNum = new Property(14, String.class, "FBaoNum", false, "FBAO_NUM");
    }


    public ReBoxBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ReBoxBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RE_BOX_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: FIndex
                "\"ACTIVITY\" INTEGER NOT NULL ," + // 1: activity
                "\"FORDER_ID\" INTEGER NOT NULL ," + // 2: FOrderId
                "\"FID\" TEXT," + // 3: FID
                "\"FBILL_NO\" TEXT," + // 4: FBillNo
                "\"FACCOUNT_ID\" TEXT," + // 5: FAccountID
                "\"FPCS\" TEXT," + // 6: FPCS
                "\"FM3\" TEXT," + // 7: FM3
                "\"FWIDE\" TEXT," + // 8: FWide
                "\"FBOX_CODE\" TEXT," + // 9: FBoxCode
                "\"FBATCH\" TEXT," + // 10: FBatch
                "\"FUNIT\" TEXT," + // 11: FUnit
                "\"FSTORAGE\" TEXT," + // 12: FStorage
                "\"FCAR_NO\" TEXT," + // 13: FCarNo
                "\"FBAO_NUM\" TEXT);"); // 14: FBaoNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RE_BOX_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReBoxBean entity) {
        stmt.clearBindings();
 
        Long FIndex = entity.getFIndex();
        if (FIndex != null) {
            stmt.bindLong(1, FIndex);
        }
        stmt.bindLong(2, entity.getActivity());
        stmt.bindLong(3, entity.getFOrderId());
 
        String FID = entity.getFID();
        if (FID != null) {
            stmt.bindString(4, FID);
        }
 
        String FBillNo = entity.getFBillNo();
        if (FBillNo != null) {
            stmt.bindString(5, FBillNo);
        }
 
        String FAccountID = entity.getFAccountID();
        if (FAccountID != null) {
            stmt.bindString(6, FAccountID);
        }
 
        String FPCS = entity.getFPCS();
        if (FPCS != null) {
            stmt.bindString(7, FPCS);
        }
 
        String FM3 = entity.getFM3();
        if (FM3 != null) {
            stmt.bindString(8, FM3);
        }
 
        String FWide = entity.getFWide();
        if (FWide != null) {
            stmt.bindString(9, FWide);
        }
 
        String FBoxCode = entity.getFBoxCode();
        if (FBoxCode != null) {
            stmt.bindString(10, FBoxCode);
        }
 
        String FBatch = entity.getFBatch();
        if (FBatch != null) {
            stmt.bindString(11, FBatch);
        }
 
        String FUnit = entity.getFUnit();
        if (FUnit != null) {
            stmt.bindString(12, FUnit);
        }
 
        String FStorage = entity.getFStorage();
        if (FStorage != null) {
            stmt.bindString(13, FStorage);
        }
 
        String FCarNo = entity.getFCarNo();
        if (FCarNo != null) {
            stmt.bindString(14, FCarNo);
        }
 
        String FBaoNum = entity.getFBaoNum();
        if (FBaoNum != null) {
            stmt.bindString(15, FBaoNum);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReBoxBean entity) {
        stmt.clearBindings();
 
        Long FIndex = entity.getFIndex();
        if (FIndex != null) {
            stmt.bindLong(1, FIndex);
        }
        stmt.bindLong(2, entity.getActivity());
        stmt.bindLong(3, entity.getFOrderId());
 
        String FID = entity.getFID();
        if (FID != null) {
            stmt.bindString(4, FID);
        }
 
        String FBillNo = entity.getFBillNo();
        if (FBillNo != null) {
            stmt.bindString(5, FBillNo);
        }
 
        String FAccountID = entity.getFAccountID();
        if (FAccountID != null) {
            stmt.bindString(6, FAccountID);
        }
 
        String FPCS = entity.getFPCS();
        if (FPCS != null) {
            stmt.bindString(7, FPCS);
        }
 
        String FM3 = entity.getFM3();
        if (FM3 != null) {
            stmt.bindString(8, FM3);
        }
 
        String FWide = entity.getFWide();
        if (FWide != null) {
            stmt.bindString(9, FWide);
        }
 
        String FBoxCode = entity.getFBoxCode();
        if (FBoxCode != null) {
            stmt.bindString(10, FBoxCode);
        }
 
        String FBatch = entity.getFBatch();
        if (FBatch != null) {
            stmt.bindString(11, FBatch);
        }
 
        String FUnit = entity.getFUnit();
        if (FUnit != null) {
            stmt.bindString(12, FUnit);
        }
 
        String FStorage = entity.getFStorage();
        if (FStorage != null) {
            stmt.bindString(13, FStorage);
        }
 
        String FCarNo = entity.getFCarNo();
        if (FCarNo != null) {
            stmt.bindString(14, FCarNo);
        }
 
        String FBaoNum = entity.getFBaoNum();
        if (FBaoNum != null) {
            stmt.bindString(15, FBaoNum);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ReBoxBean readEntity(Cursor cursor, int offset) {
        ReBoxBean entity = new ReBoxBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // FIndex
            cursor.getInt(offset + 1), // activity
            cursor.getLong(offset + 2), // FOrderId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FBillNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // FAccountID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // FPCS
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // FM3
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FWide
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // FBoxCode
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // FBatch
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // FUnit
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // FStorage
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // FCarNo
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // FBaoNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReBoxBean entity, int offset) {
        entity.setFIndex(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setActivity(cursor.getInt(offset + 1));
        entity.setFOrderId(cursor.getLong(offset + 2));
        entity.setFID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFBillNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFAccountID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFPCS(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFM3(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFWide(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFBoxCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFBatch(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFUnit(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFStorage(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFCarNo(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setFBaoNum(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ReBoxBean entity, long rowId) {
        entity.setFIndex(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ReBoxBean entity) {
        if(entity != null) {
            return entity.getFIndex();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReBoxBean entity) {
        return entity.getFIndex() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
