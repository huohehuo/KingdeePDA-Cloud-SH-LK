package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.cloud.Dao.NumberBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NUMBER_BEAN".
*/
public class NumberBeanDao extends AbstractDao<NumberBean, Void> {

    public static final String TABLENAME = "NUMBER_BEAN";

    /**
     * Properties of entity NumberBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FNumber = new Property(0, int.class, "FNumber", false, "FNUMBER");
        public final static Property FNumber2 = new Property(1, int.class, "FNumber2", false, "FNUMBER2");
        public final static Property FNumber3 = new Property(2, int.class, "FNumber3", false, "FNUMBER3");
        public final static Property FNumber4 = new Property(3, int.class, "FNumber4", false, "FNUMBER4");
        public final static Property FDouble = new Property(4, Double.class, "FDouble", false, "FDOUBLE");
        public final static Property FDouble2 = new Property(5, Double.class, "FDouble2", false, "FDOUBLE2");
        public final static Property FDouble3 = new Property(6, Double.class, "FDouble3", false, "FDOUBLE3");
        public final static Property FDouble4 = new Property(7, Double.class, "FDouble4", false, "FDOUBLE4");
    }


    public NumberBeanDao(DaoConfig config) {
        super(config);
    }
    
    public NumberBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NUMBER_BEAN\" (" + //
                "\"FNUMBER\" INTEGER NOT NULL ," + // 0: FNumber
                "\"FNUMBER2\" INTEGER NOT NULL ," + // 1: FNumber2
                "\"FNUMBER3\" INTEGER NOT NULL ," + // 2: FNumber3
                "\"FNUMBER4\" INTEGER NOT NULL ," + // 3: FNumber4
                "\"FDOUBLE\" REAL," + // 4: FDouble
                "\"FDOUBLE2\" REAL," + // 5: FDouble2
                "\"FDOUBLE3\" REAL," + // 6: FDouble3
                "\"FDOUBLE4\" REAL);"); // 7: FDouble4
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NUMBER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NumberBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getFNumber());
        stmt.bindLong(2, entity.getFNumber2());
        stmt.bindLong(3, entity.getFNumber3());
        stmt.bindLong(4, entity.getFNumber4());
 
        Double FDouble = entity.getFDouble();
        if (FDouble != null) {
            stmt.bindDouble(5, FDouble);
        }
 
        Double FDouble2 = entity.getFDouble2();
        if (FDouble2 != null) {
            stmt.bindDouble(6, FDouble2);
        }
 
        Double FDouble3 = entity.getFDouble3();
        if (FDouble3 != null) {
            stmt.bindDouble(7, FDouble3);
        }
 
        Double FDouble4 = entity.getFDouble4();
        if (FDouble4 != null) {
            stmt.bindDouble(8, FDouble4);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NumberBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getFNumber());
        stmt.bindLong(2, entity.getFNumber2());
        stmt.bindLong(3, entity.getFNumber3());
        stmt.bindLong(4, entity.getFNumber4());
 
        Double FDouble = entity.getFDouble();
        if (FDouble != null) {
            stmt.bindDouble(5, FDouble);
        }
 
        Double FDouble2 = entity.getFDouble2();
        if (FDouble2 != null) {
            stmt.bindDouble(6, FDouble2);
        }
 
        Double FDouble3 = entity.getFDouble3();
        if (FDouble3 != null) {
            stmt.bindDouble(7, FDouble3);
        }
 
        Double FDouble4 = entity.getFDouble4();
        if (FDouble4 != null) {
            stmt.bindDouble(8, FDouble4);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public NumberBean readEntity(Cursor cursor, int offset) {
        NumberBean entity = new NumberBean( //
            cursor.getInt(offset + 0), // FNumber
            cursor.getInt(offset + 1), // FNumber2
            cursor.getInt(offset + 2), // FNumber3
            cursor.getInt(offset + 3), // FNumber4
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // FDouble
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // FDouble2
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // FDouble3
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7) // FDouble4
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NumberBean entity, int offset) {
        entity.setFNumber(cursor.getInt(offset + 0));
        entity.setFNumber2(cursor.getInt(offset + 1));
        entity.setFNumber3(cursor.getInt(offset + 2));
        entity.setFNumber4(cursor.getInt(offset + 3));
        entity.setFDouble(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setFDouble2(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setFDouble3(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setFDouble4(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(NumberBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(NumberBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(NumberBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
