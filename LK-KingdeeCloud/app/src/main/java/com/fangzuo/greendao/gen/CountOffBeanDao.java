package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.cloud.Dao.CountOffBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COUNT_OFF_BEAN".
*/
public class CountOffBeanDao extends AbstractDao<CountOffBean, Long> {

    public static final String TABLENAME = "COUNT_OFF_BEAN";

    /**
     * Properties of entity CountOffBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FIndex = new Property(0, Long.class, "FIndex", true, "_id");
        public final static Property FLenght = new Property(1, String.class, "FLenght", false, "FLENGHT");
        public final static Property FCountNumber = new Property(2, int.class, "FCountNumber", false, "FCOUNT_NUMBER");
        public final static Property FAveMax = new Property(3, String.class, "FAveMax", false, "FAVE_MAX");
        public final static Property FBoxCode = new Property(4, String.class, "FBoxCode", false, "FBOX_CODE");
        public final static Property FProductID = new Property(5, String.class, "FProductID", false, "FPRODUCT_ID");
        public final static Property FProductNumber = new Property(6, String.class, "FProductNumber", false, "FPRODUCT_NUMBER");
        public final static Property FUnitID = new Property(7, String.class, "FUnitID", false, "FUNIT_ID");
        public final static Property FQty = new Property(8, String.class, "FQty", false, "FQTY");
        public final static Property FStorageID = new Property(9, String.class, "FStorageID", false, "FSTORAGE_ID");
        public final static Property FWaveHouseID = new Property(10, String.class, "FWaveHouseID", false, "FWAVE_HOUSE_ID");
        public final static Property FStoreOrgID = new Property(11, String.class, "FStoreOrgID", false, "FSTORE_ORG_ID");
        public final static Property FHuozhuID = new Property(12, String.class, "FHuozhuID", false, "FHUOZHU_ID");
        public final static Property FOrderCode = new Property(13, long.class, "FOrderCode", false, "FORDER_CODE");
        public final static Property FBackOrderCode = new Property(14, long.class, "FBackOrderCode", false, "FBACK_ORDER_CODE");
    }


    public CountOffBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CountOffBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COUNT_OFF_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: FIndex
                "\"FLENGHT\" TEXT," + // 1: FLenght
                "\"FCOUNT_NUMBER\" INTEGER NOT NULL ," + // 2: FCountNumber
                "\"FAVE_MAX\" TEXT," + // 3: FAveMax
                "\"FBOX_CODE\" TEXT," + // 4: FBoxCode
                "\"FPRODUCT_ID\" TEXT," + // 5: FProductID
                "\"FPRODUCT_NUMBER\" TEXT," + // 6: FProductNumber
                "\"FUNIT_ID\" TEXT," + // 7: FUnitID
                "\"FQTY\" TEXT," + // 8: FQty
                "\"FSTORAGE_ID\" TEXT," + // 9: FStorageID
                "\"FWAVE_HOUSE_ID\" TEXT," + // 10: FWaveHouseID
                "\"FSTORE_ORG_ID\" TEXT," + // 11: FStoreOrgID
                "\"FHUOZHU_ID\" TEXT," + // 12: FHuozhuID
                "\"FORDER_CODE\" INTEGER NOT NULL ," + // 13: FOrderCode
                "\"FBACK_ORDER_CODE\" INTEGER NOT NULL );"); // 14: FBackOrderCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COUNT_OFF_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CountOffBean entity) {
        stmt.clearBindings();
 
        Long FIndex = entity.getFIndex();
        if (FIndex != null) {
            stmt.bindLong(1, FIndex);
        }
 
        String FLenght = entity.getFLenght();
        if (FLenght != null) {
            stmt.bindString(2, FLenght);
        }
        stmt.bindLong(3, entity.getFCountNumber());
 
        String FAveMax = entity.getFAveMax();
        if (FAveMax != null) {
            stmt.bindString(4, FAveMax);
        }
 
        String FBoxCode = entity.getFBoxCode();
        if (FBoxCode != null) {
            stmt.bindString(5, FBoxCode);
        }
 
        String FProductID = entity.getFProductID();
        if (FProductID != null) {
            stmt.bindString(6, FProductID);
        }
 
        String FProductNumber = entity.getFProductNumber();
        if (FProductNumber != null) {
            stmt.bindString(7, FProductNumber);
        }
 
        String FUnitID = entity.getFUnitID();
        if (FUnitID != null) {
            stmt.bindString(8, FUnitID);
        }
 
        String FQty = entity.getFQty();
        if (FQty != null) {
            stmt.bindString(9, FQty);
        }
 
        String FStorageID = entity.getFStorageID();
        if (FStorageID != null) {
            stmt.bindString(10, FStorageID);
        }
 
        String FWaveHouseID = entity.getFWaveHouseID();
        if (FWaveHouseID != null) {
            stmt.bindString(11, FWaveHouseID);
        }
 
        String FStoreOrgID = entity.getFStoreOrgID();
        if (FStoreOrgID != null) {
            stmt.bindString(12, FStoreOrgID);
        }
 
        String FHuozhuID = entity.getFHuozhuID();
        if (FHuozhuID != null) {
            stmt.bindString(13, FHuozhuID);
        }
        stmt.bindLong(14, entity.getFOrderCode());
        stmt.bindLong(15, entity.getFBackOrderCode());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CountOffBean entity) {
        stmt.clearBindings();
 
        Long FIndex = entity.getFIndex();
        if (FIndex != null) {
            stmt.bindLong(1, FIndex);
        }
 
        String FLenght = entity.getFLenght();
        if (FLenght != null) {
            stmt.bindString(2, FLenght);
        }
        stmt.bindLong(3, entity.getFCountNumber());
 
        String FAveMax = entity.getFAveMax();
        if (FAveMax != null) {
            stmt.bindString(4, FAveMax);
        }
 
        String FBoxCode = entity.getFBoxCode();
        if (FBoxCode != null) {
            stmt.bindString(5, FBoxCode);
        }
 
        String FProductID = entity.getFProductID();
        if (FProductID != null) {
            stmt.bindString(6, FProductID);
        }
 
        String FProductNumber = entity.getFProductNumber();
        if (FProductNumber != null) {
            stmt.bindString(7, FProductNumber);
        }
 
        String FUnitID = entity.getFUnitID();
        if (FUnitID != null) {
            stmt.bindString(8, FUnitID);
        }
 
        String FQty = entity.getFQty();
        if (FQty != null) {
            stmt.bindString(9, FQty);
        }
 
        String FStorageID = entity.getFStorageID();
        if (FStorageID != null) {
            stmt.bindString(10, FStorageID);
        }
 
        String FWaveHouseID = entity.getFWaveHouseID();
        if (FWaveHouseID != null) {
            stmt.bindString(11, FWaveHouseID);
        }
 
        String FStoreOrgID = entity.getFStoreOrgID();
        if (FStoreOrgID != null) {
            stmt.bindString(12, FStoreOrgID);
        }
 
        String FHuozhuID = entity.getFHuozhuID();
        if (FHuozhuID != null) {
            stmt.bindString(13, FHuozhuID);
        }
        stmt.bindLong(14, entity.getFOrderCode());
        stmt.bindLong(15, entity.getFBackOrderCode());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CountOffBean readEntity(Cursor cursor, int offset) {
        CountOffBean entity = new CountOffBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // FIndex
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FLenght
            cursor.getInt(offset + 2), // FCountNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FAveMax
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FBoxCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // FProductID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // FProductNumber
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // FUnitID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FQty
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // FStorageID
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // FWaveHouseID
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // FStoreOrgID
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // FHuozhuID
            cursor.getLong(offset + 13), // FOrderCode
            cursor.getLong(offset + 14) // FBackOrderCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CountOffBean entity, int offset) {
        entity.setFIndex(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFLenght(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFCountNumber(cursor.getInt(offset + 2));
        entity.setFAveMax(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFBoxCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFProductID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFProductNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFUnitID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFQty(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFStorageID(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFWaveHouseID(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFStoreOrgID(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFHuozhuID(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFOrderCode(cursor.getLong(offset + 13));
        entity.setFBackOrderCode(cursor.getLong(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CountOffBean entity, long rowId) {
        entity.setFIndex(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CountOffBean entity) {
        if(entity != null) {
            return entity.getFIndex();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CountOffBean entity) {
        return entity.getFIndex() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
