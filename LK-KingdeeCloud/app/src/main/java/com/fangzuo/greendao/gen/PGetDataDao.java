package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.cloud.Dao.PGetData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PGET_DATA".
*/
public class PGetDataDao extends AbstractDao<PGetData, Long> {

    public static final String TABLENAME = "PGET_DATA";

    /**
     * Properties of entity PGetData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FIndex = new Property(0, Long.class, "FIndex", true, "_id");
        public final static Property FID = new Property(1, String.class, "FID", false, "FID");
        public final static Property FBillNo = new Property(2, String.class, "FBillNo", false, "FBILL_NO");
        public final static Property PCS = new Property(3, String.class, "PCS", false, "PCS");
        public final static Property M3 = new Property(4, String.class, "M3", false, "M3");
        public final static Property FAccountID = new Property(5, String.class, "FAccountID", false, "FACCOUNT_ID");
        public final static Property FWide = new Property(6, String.class, "FWide", false, "FWIDE");
        public final static Property FStr1 = new Property(7, String.class, "FStr1", false, "FSTR1");
        public final static Property FStr2 = new Property(8, String.class, "FStr2", false, "FSTR2");
        public final static Property FStr3 = new Property(9, String.class, "FStr3", false, "FSTR3");
        public final static Property FStr4 = new Property(10, String.class, "FStr4", false, "FSTR4");
        public final static Property FStr5 = new Property(11, String.class, "FStr5", false, "FSTR5");
    }


    public PGetDataDao(DaoConfig config) {
        super(config);
    }
    
    public PGetDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PGET_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: FIndex
                "\"FID\" TEXT," + // 1: FID
                "\"FBILL_NO\" TEXT," + // 2: FBillNo
                "\"PCS\" TEXT," + // 3: PCS
                "\"M3\" TEXT," + // 4: M3
                "\"FACCOUNT_ID\" TEXT," + // 5: FAccountID
                "\"FWIDE\" TEXT," + // 6: FWide
                "\"FSTR1\" TEXT," + // 7: FStr1
                "\"FSTR2\" TEXT," + // 8: FStr2
                "\"FSTR3\" TEXT," + // 9: FStr3
                "\"FSTR4\" TEXT," + // 10: FStr4
                "\"FSTR5\" TEXT);"); // 11: FStr5
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PGET_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PGetData entity) {
        stmt.clearBindings();
 
        Long FIndex = entity.getFIndex();
        if (FIndex != null) {
            stmt.bindLong(1, FIndex);
        }
 
        String FID = entity.getFID();
        if (FID != null) {
            stmt.bindString(2, FID);
        }
 
        String FBillNo = entity.getFBillNo();
        if (FBillNo != null) {
            stmt.bindString(3, FBillNo);
        }
 
        String PCS = entity.getPCS();
        if (PCS != null) {
            stmt.bindString(4, PCS);
        }
 
        String M3 = entity.getM3();
        if (M3 != null) {
            stmt.bindString(5, M3);
        }
 
        String FAccountID = entity.getFAccountID();
        if (FAccountID != null) {
            stmt.bindString(6, FAccountID);
        }
 
        String FWide = entity.getFWide();
        if (FWide != null) {
            stmt.bindString(7, FWide);
        }
 
        String FStr1 = entity.getFStr1();
        if (FStr1 != null) {
            stmt.bindString(8, FStr1);
        }
 
        String FStr2 = entity.getFStr2();
        if (FStr2 != null) {
            stmt.bindString(9, FStr2);
        }
 
        String FStr3 = entity.getFStr3();
        if (FStr3 != null) {
            stmt.bindString(10, FStr3);
        }
 
        String FStr4 = entity.getFStr4();
        if (FStr4 != null) {
            stmt.bindString(11, FStr4);
        }
 
        String FStr5 = entity.getFStr5();
        if (FStr5 != null) {
            stmt.bindString(12, FStr5);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PGetData entity) {
        stmt.clearBindings();
 
        Long FIndex = entity.getFIndex();
        if (FIndex != null) {
            stmt.bindLong(1, FIndex);
        }
 
        String FID = entity.getFID();
        if (FID != null) {
            stmt.bindString(2, FID);
        }
 
        String FBillNo = entity.getFBillNo();
        if (FBillNo != null) {
            stmt.bindString(3, FBillNo);
        }
 
        String PCS = entity.getPCS();
        if (PCS != null) {
            stmt.bindString(4, PCS);
        }
 
        String M3 = entity.getM3();
        if (M3 != null) {
            stmt.bindString(5, M3);
        }
 
        String FAccountID = entity.getFAccountID();
        if (FAccountID != null) {
            stmt.bindString(6, FAccountID);
        }
 
        String FWide = entity.getFWide();
        if (FWide != null) {
            stmt.bindString(7, FWide);
        }
 
        String FStr1 = entity.getFStr1();
        if (FStr1 != null) {
            stmt.bindString(8, FStr1);
        }
 
        String FStr2 = entity.getFStr2();
        if (FStr2 != null) {
            stmt.bindString(9, FStr2);
        }
 
        String FStr3 = entity.getFStr3();
        if (FStr3 != null) {
            stmt.bindString(10, FStr3);
        }
 
        String FStr4 = entity.getFStr4();
        if (FStr4 != null) {
            stmt.bindString(11, FStr4);
        }
 
        String FStr5 = entity.getFStr5();
        if (FStr5 != null) {
            stmt.bindString(12, FStr5);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PGetData readEntity(Cursor cursor, int offset) {
        PGetData entity = new PGetData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // FIndex
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FBillNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // PCS
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // M3
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // FAccountID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // FWide
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // FStr1
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FStr2
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // FStr3
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // FStr4
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // FStr5
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PGetData entity, int offset) {
        entity.setFIndex(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFBillNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPCS(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setM3(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFAccountID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFWide(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFStr1(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFStr2(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFStr3(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFStr4(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFStr5(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PGetData entity, long rowId) {
        entity.setFIndex(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PGetData entity) {
        if(entity != null) {
            return entity.getFIndex();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PGetData entity) {
        return entity.getFIndex() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
