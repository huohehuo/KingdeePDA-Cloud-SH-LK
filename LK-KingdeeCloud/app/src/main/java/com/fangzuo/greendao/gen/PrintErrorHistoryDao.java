package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.cloud.Dao.PrintErrorHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRINT_ERROR_HISTORY".
*/
public class PrintErrorHistoryDao extends AbstractDao<PrintErrorHistory, Long> {

    public static final String TABLENAME = "PRINT_ERROR_HISTORY";

    /**
     * Properties of entity PrintErrorHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FIndex = new Property(0, Long.class, "FIndex", true, "_id");
        public final static Property FBoxCode = new Property(1, String.class, "FBoxCode", false, "FBOX_CODE");
        public final static Property FTime = new Property(2, String.class, "FTime", false, "FTIME");
        public final static Property FState = new Property(3, String.class, "FState", false, "FSTATE");
        public final static Property FNote = new Property(4, String.class, "FNote", false, "FNOTE");
        public final static Property FRemark1 = new Property(5, String.class, "FRemark1", false, "FREMARK1");
        public final static Property FRemark2 = new Property(6, String.class, "FRemark2", false, "FREMARK2");
        public final static Property FRemark3 = new Property(7, String.class, "FRemark3", false, "FREMARK3");
        public final static Property FRemark4 = new Property(8, String.class, "FRemark4", false, "FREMARK4");
    }


    public PrintErrorHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public PrintErrorHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRINT_ERROR_HISTORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: FIndex
                "\"FBOX_CODE\" TEXT," + // 1: FBoxCode
                "\"FTIME\" TEXT," + // 2: FTime
                "\"FSTATE\" TEXT," + // 3: FState
                "\"FNOTE\" TEXT," + // 4: FNote
                "\"FREMARK1\" TEXT," + // 5: FRemark1
                "\"FREMARK2\" TEXT," + // 6: FRemark2
                "\"FREMARK3\" TEXT," + // 7: FRemark3
                "\"FREMARK4\" TEXT);"); // 8: FRemark4
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRINT_ERROR_HISTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PrintErrorHistory entity) {
        stmt.clearBindings();
 
        Long FIndex = entity.getFIndex();
        if (FIndex != null) {
            stmt.bindLong(1, FIndex);
        }
 
        String FBoxCode = entity.getFBoxCode();
        if (FBoxCode != null) {
            stmt.bindString(2, FBoxCode);
        }
 
        String FTime = entity.getFTime();
        if (FTime != null) {
            stmt.bindString(3, FTime);
        }
 
        String FState = entity.getFState();
        if (FState != null) {
            stmt.bindString(4, FState);
        }
 
        String FNote = entity.getFNote();
        if (FNote != null) {
            stmt.bindString(5, FNote);
        }
 
        String FRemark1 = entity.getFRemark1();
        if (FRemark1 != null) {
            stmt.bindString(6, FRemark1);
        }
 
        String FRemark2 = entity.getFRemark2();
        if (FRemark2 != null) {
            stmt.bindString(7, FRemark2);
        }
 
        String FRemark3 = entity.getFRemark3();
        if (FRemark3 != null) {
            stmt.bindString(8, FRemark3);
        }
 
        String FRemark4 = entity.getFRemark4();
        if (FRemark4 != null) {
            stmt.bindString(9, FRemark4);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PrintErrorHistory entity) {
        stmt.clearBindings();
 
        Long FIndex = entity.getFIndex();
        if (FIndex != null) {
            stmt.bindLong(1, FIndex);
        }
 
        String FBoxCode = entity.getFBoxCode();
        if (FBoxCode != null) {
            stmt.bindString(2, FBoxCode);
        }
 
        String FTime = entity.getFTime();
        if (FTime != null) {
            stmt.bindString(3, FTime);
        }
 
        String FState = entity.getFState();
        if (FState != null) {
            stmt.bindString(4, FState);
        }
 
        String FNote = entity.getFNote();
        if (FNote != null) {
            stmt.bindString(5, FNote);
        }
 
        String FRemark1 = entity.getFRemark1();
        if (FRemark1 != null) {
            stmt.bindString(6, FRemark1);
        }
 
        String FRemark2 = entity.getFRemark2();
        if (FRemark2 != null) {
            stmt.bindString(7, FRemark2);
        }
 
        String FRemark3 = entity.getFRemark3();
        if (FRemark3 != null) {
            stmt.bindString(8, FRemark3);
        }
 
        String FRemark4 = entity.getFRemark4();
        if (FRemark4 != null) {
            stmt.bindString(9, FRemark4);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PrintErrorHistory readEntity(Cursor cursor, int offset) {
        PrintErrorHistory entity = new PrintErrorHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // FIndex
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FBoxCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FState
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FNote
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // FRemark1
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // FRemark2
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // FRemark3
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // FRemark4
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PrintErrorHistory entity, int offset) {
        entity.setFIndex(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFBoxCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFState(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFNote(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFRemark1(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFRemark2(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFRemark3(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFRemark4(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PrintErrorHistory entity, long rowId) {
        entity.setFIndex(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PrintErrorHistory entity) {
        if(entity != null) {
            return entity.getFIndex();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PrintErrorHistory entity) {
        return entity.getFIndex() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
