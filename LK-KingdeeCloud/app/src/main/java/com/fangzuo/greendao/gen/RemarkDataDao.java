package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.cloud.Dao.RemarkData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REMARK_DATA".
*/
public class RemarkDataDao extends AbstractDao<RemarkData, Void> {

    public static final String TABLENAME = "REMARK_DATA";

    /**
     * Properties of entity RemarkData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FNUMBER = new Property(0, String.class, "FNUMBER", false, "FNUMBER");
        public final static Property FUSEORGID = new Property(1, String.class, "FUSEORGID", false, "FUSEORGID");
        public final static Property FNAME = new Property(2, String.class, "FNAME", false, "FNAME");
        public final static Property FSHORTNAME = new Property(3, String.class, "FSHORTNAME", false, "FSHORTNAME");
    }


    public RemarkDataDao(DaoConfig config) {
        super(config);
    }
    
    public RemarkDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REMARK_DATA\" (" + //
                "\"FNUMBER\" TEXT," + // 0: FNUMBER
                "\"FUSEORGID\" TEXT," + // 1: FUSEORGID
                "\"FNAME\" TEXT," + // 2: FNAME
                "\"FSHORTNAME\" TEXT);"); // 3: FSHORTNAME
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REMARK_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RemarkData entity) {
        stmt.clearBindings();
 
        String FNUMBER = entity.getFNUMBER();
        if (FNUMBER != null) {
            stmt.bindString(1, FNUMBER);
        }
 
        String FUSEORGID = entity.getFUSEORGID();
        if (FUSEORGID != null) {
            stmt.bindString(2, FUSEORGID);
        }
 
        String FNAME = entity.getFNAME();
        if (FNAME != null) {
            stmt.bindString(3, FNAME);
        }
 
        String FSHORTNAME = entity.getFSHORTNAME();
        if (FSHORTNAME != null) {
            stmt.bindString(4, FSHORTNAME);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RemarkData entity) {
        stmt.clearBindings();
 
        String FNUMBER = entity.getFNUMBER();
        if (FNUMBER != null) {
            stmt.bindString(1, FNUMBER);
        }
 
        String FUSEORGID = entity.getFUSEORGID();
        if (FUSEORGID != null) {
            stmt.bindString(2, FUSEORGID);
        }
 
        String FNAME = entity.getFNAME();
        if (FNAME != null) {
            stmt.bindString(3, FNAME);
        }
 
        String FSHORTNAME = entity.getFSHORTNAME();
        if (FSHORTNAME != null) {
            stmt.bindString(4, FSHORTNAME);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public RemarkData readEntity(Cursor cursor, int offset) {
        RemarkData entity = new RemarkData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // FNUMBER
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FUSEORGID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FNAME
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // FSHORTNAME
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RemarkData entity, int offset) {
        entity.setFNUMBER(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFUSEORGID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFNAME(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFSHORTNAME(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(RemarkData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(RemarkData entity) {
        return null;
    }

    @Override
    public boolean hasKey(RemarkData entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
