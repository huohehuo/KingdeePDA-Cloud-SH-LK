package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.cloud.Dao.PDSub;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PDSUB".
*/
public class PDSubDao extends AbstractDao<PDSub, Long> {

    public static final String TABLENAME = "PDSUB";

    /**
     * Properties of entity PDSub.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FID = new Property(1, String.class, "FID", false, "FID");
        public final static Property FEntryID = new Property(2, String.class, "FEntryID", false, "FENTRY_ID");
        public final static Property FSEQ = new Property(3, String.class, "FSEQ", false, "FSEQ");
        public final static Property FStockID = new Property(4, String.class, "FStockID", false, "FSTOCK_ID");
        public final static Property FStockPlaceID = new Property(5, String.class, "FStockPlaceID", false, "FSTOCK_PLACE_ID");
        public final static Property FMaterialID = new Property(6, String.class, "FMaterialID", false, "FMATERIAL_ID");
        public final static Property FUnitID = new Property(7, String.class, "FUnitID", false, "FUNIT_ID");
        public final static Property FAcctQty = new Property(8, String.class, "FAcctQty", false, "FACCT_QTY");
        public final static Property FCountQty = new Property(9, String.class, "FCountQty", false, "FCOUNT_QTY");
        public final static Property FLot = new Property(10, String.class, "FLot", false, "FLOT");
        public final static Property FLot_Text = new Property(11, String.class, "FLot_Text", false, "FLOT__TEXT");
    }


    public PDSubDao(DaoConfig config) {
        super(config);
    }
    
    public PDSubDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PDSUB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FID\" TEXT," + // 1: FID
                "\"FENTRY_ID\" TEXT," + // 2: FEntryID
                "\"FSEQ\" TEXT," + // 3: FSEQ
                "\"FSTOCK_ID\" TEXT," + // 4: FStockID
                "\"FSTOCK_PLACE_ID\" TEXT," + // 5: FStockPlaceID
                "\"FMATERIAL_ID\" TEXT," + // 6: FMaterialID
                "\"FUNIT_ID\" TEXT," + // 7: FUnitID
                "\"FACCT_QTY\" TEXT," + // 8: FAcctQty
                "\"FCOUNT_QTY\" TEXT," + // 9: FCountQty
                "\"FLOT\" TEXT," + // 10: FLot
                "\"FLOT__TEXT\" TEXT);"); // 11: FLot_Text
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PDSUB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PDSub entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String FID = entity.getFID();
        if (FID != null) {
            stmt.bindString(2, FID);
        }
 
        String FEntryID = entity.getFEntryID();
        if (FEntryID != null) {
            stmt.bindString(3, FEntryID);
        }
 
        String FSEQ = entity.getFSEQ();
        if (FSEQ != null) {
            stmt.bindString(4, FSEQ);
        }
 
        String FStockID = entity.getFStockID();
        if (FStockID != null) {
            stmt.bindString(5, FStockID);
        }
 
        String FStockPlaceID = entity.getFStockPlaceID();
        if (FStockPlaceID != null) {
            stmt.bindString(6, FStockPlaceID);
        }
 
        String FMaterialID = entity.getFMaterialID();
        if (FMaterialID != null) {
            stmt.bindString(7, FMaterialID);
        }
 
        String FUnitID = entity.getFUnitID();
        if (FUnitID != null) {
            stmt.bindString(8, FUnitID);
        }
 
        String FAcctQty = entity.getFAcctQty();
        if (FAcctQty != null) {
            stmt.bindString(9, FAcctQty);
        }
 
        String FCountQty = entity.getFCountQty();
        if (FCountQty != null) {
            stmt.bindString(10, FCountQty);
        }
 
        String FLot = entity.getFLot();
        if (FLot != null) {
            stmt.bindString(11, FLot);
        }
 
        String FLot_Text = entity.getFLot_Text();
        if (FLot_Text != null) {
            stmt.bindString(12, FLot_Text);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PDSub entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String FID = entity.getFID();
        if (FID != null) {
            stmt.bindString(2, FID);
        }
 
        String FEntryID = entity.getFEntryID();
        if (FEntryID != null) {
            stmt.bindString(3, FEntryID);
        }
 
        String FSEQ = entity.getFSEQ();
        if (FSEQ != null) {
            stmt.bindString(4, FSEQ);
        }
 
        String FStockID = entity.getFStockID();
        if (FStockID != null) {
            stmt.bindString(5, FStockID);
        }
 
        String FStockPlaceID = entity.getFStockPlaceID();
        if (FStockPlaceID != null) {
            stmt.bindString(6, FStockPlaceID);
        }
 
        String FMaterialID = entity.getFMaterialID();
        if (FMaterialID != null) {
            stmt.bindString(7, FMaterialID);
        }
 
        String FUnitID = entity.getFUnitID();
        if (FUnitID != null) {
            stmt.bindString(8, FUnitID);
        }
 
        String FAcctQty = entity.getFAcctQty();
        if (FAcctQty != null) {
            stmt.bindString(9, FAcctQty);
        }
 
        String FCountQty = entity.getFCountQty();
        if (FCountQty != null) {
            stmt.bindString(10, FCountQty);
        }
 
        String FLot = entity.getFLot();
        if (FLot != null) {
            stmt.bindString(11, FLot);
        }
 
        String FLot_Text = entity.getFLot_Text();
        if (FLot_Text != null) {
            stmt.bindString(12, FLot_Text);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PDSub readEntity(Cursor cursor, int offset) {
        PDSub entity = new PDSub( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // FID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // FEntryID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // FSEQ
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FStockID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // FStockPlaceID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // FMaterialID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // FUnitID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FAcctQty
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // FCountQty
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // FLot
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // FLot_Text
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PDSub entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFEntryID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFSEQ(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFStockID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFStockPlaceID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFMaterialID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFUnitID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFAcctQty(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFCountQty(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFLot(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFLot_Text(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PDSub entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PDSub entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PDSub entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
