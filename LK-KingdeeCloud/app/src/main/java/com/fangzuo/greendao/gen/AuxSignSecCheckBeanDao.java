package com.fangzuo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fangzuo.assist.cloud.Beans.AuxSignSecCheckBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AUX_SIGN_SEC_CHECK_BEAN".
*/
public class AuxSignSecCheckBeanDao extends AbstractDao<AuxSignSecCheckBean, Void> {

    public static final String TABLENAME = "AUX_SIGN_SEC_CHECK_BEAN";

    /**
     * Properties of entity AuxSignSecCheckBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FAUXPTYID = new Property(0, String.class, "FAUXPTYID", false, "FAUXPTYID");
        public final static Property FNUMBER = new Property(1, String.class, "FNUMBER", false, "FNUMBER");
    }


    public AuxSignSecCheckBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AuxSignSecCheckBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AUX_SIGN_SEC_CHECK_BEAN\" (" + //
                "\"FAUXPTYID\" TEXT," + // 0: FAUXPTYID
                "\"FNUMBER\" TEXT);"); // 1: FNUMBER
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AUX_SIGN_SEC_CHECK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AuxSignSecCheckBean entity) {
        stmt.clearBindings();
 
        String FAUXPTYID = entity.getFAUXPTYID();
        if (FAUXPTYID != null) {
            stmt.bindString(1, FAUXPTYID);
        }
 
        String FNUMBER = entity.getFNUMBER();
        if (FNUMBER != null) {
            stmt.bindString(2, FNUMBER);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AuxSignSecCheckBean entity) {
        stmt.clearBindings();
 
        String FAUXPTYID = entity.getFAUXPTYID();
        if (FAUXPTYID != null) {
            stmt.bindString(1, FAUXPTYID);
        }
 
        String FNUMBER = entity.getFNUMBER();
        if (FNUMBER != null) {
            stmt.bindString(2, FNUMBER);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public AuxSignSecCheckBean readEntity(Cursor cursor, int offset) {
        AuxSignSecCheckBean entity = new AuxSignSecCheckBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // FAUXPTYID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // FNUMBER
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AuxSignSecCheckBean entity, int offset) {
        entity.setFAUXPTYID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFNUMBER(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(AuxSignSecCheckBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(AuxSignSecCheckBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(AuxSignSecCheckBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
